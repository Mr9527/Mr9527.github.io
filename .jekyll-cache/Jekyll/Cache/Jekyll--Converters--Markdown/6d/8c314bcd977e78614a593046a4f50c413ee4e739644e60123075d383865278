I"X=<h2 id="了解-gradle-的架构">了解 Gradle 的架构</h2>

<blockquote>
  <p>每个 Gradle 构架都包括了三个基本的构建块:项目(Projects)、任务(tasks)、和属性(properties),每个构建至少包括一个项目,项目包括一个或多个任务,项目中有很多属性来控制构建过程.</p>

  <p>Gradle 运用了领域驱动的设计理念（DDD）来给自己的领域构建软件建模，因此 Gradle 的项目和任务都在 Gradle 的 API 中有一个直接的 class 来表示，接下来我们来深入了解每一个组件和它对应的 API。</p>
</blockquote>

<h3 id="project">Project</h3>

<p>Project 表示你想要构建的一个目标，对应具体的内容可以是一个项目、组件、jar 等。当开始构建的时候，Gradle 基于我们对项目的配置实例化 <code class="highlighter-rouge">org.gradle.api.Project</code> 这个类并让这个项目通过 <code class="highlighter-rouge">project</code> 变量来隐式的获得。下图列出了 API 接口和最重要的方法。</p>

<p><img src="https://lippiouyang.gitbooks.io/gradle-in-action-cn/images/dag24.png" alt="project" /></p>

<p>一个项目可以创建新任务、添加依赖配置、应用插件和其他脚本。而 Project 实例允许你访问你项目中所有的 gradle 特性。当你使用项目的属性和方法时你并不需要显示的使用 project 变量——Gradle 假设你需要操作 project 实例，例如:</p>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="c1">//直接设置项目描述</span>
<span class="n">setDescription</span><span class="o">(</span><span class="s2">"TestProject"</span><span class="o">)</span>
<span class="c1">//通过 Groovy 语法来访问名字和描述</span>
<span class="n">println</span> <span class="s2">"Description of project $name:"</span><span class="o">+</span><span class="n">project</span><span class="o">.</span><span class="na">description</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>每个项目和任务都提供了 setter 和 getter 方法来访问属性,你可以读取和修改这些属性值.我们还可以自定义属性。例如我们常见的在<code class="highlighter-rouge">build.gradle</code>中通过 <code class="highlighter-rouge">ext</code> 命名空间来添加一些熟悉和配置:</p>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="n">ext</span><span class="o">{</span>
  <span class="n">myOptions</span><span class="o">=</span><span class="mi">123</span>
<span class="o">}</span>
<span class="n">ext</span><span class="o">.</span><span class="na">kotlin_version</span><span class="o">=</span><span class="s2">"1.2.12"</span>
<span class="n">ext</span><span class="o">.</span><span class="na">version</span><span class="o">=[</span>
    <span class="s2">"supportVersion"</span><span class="o">:</span><span class="mi">26</span>
    <span class="s2">"compileVersion"</span><span class="o">:</span><span class="mf">26.0</span><span class="o">.</span><span class="mi">1</span>
<span class="o">]</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>也可以在 /.gradle 路径或者项目根目录下的 gradle.properties 文件来定义属性,然后通过 project 实例来访问。</p>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="c1">//gradle.properties</span>
<span class="n">exampleProp</span> <span class="o">=</span> <span class="n">oneValue</span>

<span class="c1">//build.gradle</span>
<span class="k">assert</span> <span class="n">project</span><span class="o">.</span><span class="na">exampleProp</span> <span class="o">==</span> <span class="s2">"oneValue"</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="task">Task</h3>

<p>Gradle 中的 Task 有两个基本概念——动作与依赖。一个动作就是任务需要执行的工作，可以简单到打印出 hello world，也可以复杂到编译整个项目输出 apk；而依赖则是一个任务的输入可能依赖于另一个任务的输出或者初始化时，这样就可以让一个 project 的构建工作分解成若干 task，分工明确。任务同样的有相对应的接口 <code class="highlighter-rouge">org.gradle.api.Task</code>:</p>

<p><img src="https://lippiouyang.gitbooks.io/gradle-in-action-cn/images/dag25.png" alt="task" /></p>

<h4 id="声明一个-task">声明一个 Task</h4>

<p>我们可以在<code class="highlighter-rouge">build.gradle</code> 中通过 <code class="highlighter-rouge">task</code> 声明一个 task :</p>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="n">task</span> <span class="n">simpleTask</span><span class="o">{</span>
    <span class="n">println</span> <span class="s2">"task action"</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>然后通过<code class="highlighter-rouge">gradle -q -tasks</code> 来查看当前项目定义的 task ，我们会发现我们的 simpleTask 。</p>

<p>可以通过 <code class="highlighter-rouge">gradle simpleTask</code> 来执行这个任务 ：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre>gradle -q -tasks
assemble
build
...
simpleTask

gradle simpleTaskt

task action
</pre></td></tr></tbody></table></code></pre></div></div>

<p>定义 task 的时候其实可以指定很多参数，如下所示：</p>

<table>
  <thead>
    <tr>
      <th>参数</th>
      <th>含义</th>
      <th>默认值</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>name</td>
      <td>task 的名字</td>
      <td>不能为空，必须指定</td>
    </tr>
    <tr>
      <td>type</td>
      <td>task 的“父类”</td>
      <td>DefaultTask</td>
    </tr>
    <tr>
      <td>overwrite</td>
      <td>是否替换已经存在的 task</td>
      <td>false</td>
    </tr>
    <tr>
      <td>dependsOn</td>
      <td>依赖的 task 集合</td>
      <td>[]</td>
    </tr>
    <tr>
      <td>group</td>
      <td>表示任务的逻辑分组</td>
      <td>null</td>
    </tr>
    <tr>
      <td>description</td>
      <td>task 的描述</td>
      <td>null</td>
    </tr>
  </tbody>
</table>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="n">task</span><span class="o">(</span><span class="s2">"detailTask"</span><span class="o">,</span><span class="nl">type:</span><span class="n">simpleTask</span><span class="o">,</span><span class="nl">description:</span><span class="s2">"this is a task"</span><span class="o">)</span><span class="err">｛</span>
	<span class="n">println</span> <span class="s2">"orz"</span>
<span class="err">｝</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="声明任务的动作">声明任务的动作</h4>

<p>当我们将任务内容直接写在 task 内部的时候，task 的内容会在 Project 配置过程就直接被执行：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre>gradle clean

&gt; Configure project :
task action

</pre></td></tr></tbody></table></code></pre></div></div>

<p>我们有时候并不想在装配的时候被执行，而是想要指定的时候再被执行。gradle 提供了两个方法来声明任务的动作<code class="highlighter-rouge">doFirst</code>和<code class="highlighter-rouge">doLast</code>， 他们会指定 task 执行的时候才会被执行, 执行顺序如它们的名字一样会是 task 开始时第一个和最后一个操作。</p>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre><span class="n">task</span> <span class="n">myTask</span> <span class="o">{</span>
   <span class="n">println</span> <span class="s1">' -&gt; '</span>
    <span class="n">doLast</span><span class="o">{</span>
        <span class="n">println</span> <span class="s1">'World!'</span>
    <span class="o">}</span>
    <span class="n">doFirst</span><span class="o">{</span>
        <span class="n">println</span> <span class="s1">'Hello'</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="c1">// gradle myTask</span>
<span class="o">-&gt;</span> <span class="n">Hello</span> <span class="n">World</span><span class="o">!</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>我们还可以在已经创建的 task 中插入动作：</p>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="n">task</span> <span class="n">oneTask</span><span class="o">{</span>
    <span class="kt">def</span> <span class="n">a</span> <span class="o">=</span><span class="s2">"xxx"</span>
    <span class="n">println</span><span class="o">(</span><span class="s2">"${a} bbb"</span><span class="o">)</span>
<span class="o">}</span>
<span class="n">oneTask</span> <span class="o">&gt;&gt;</span> <span class="o">{</span><span class="s2">"action"</span><span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>我们还经常在文档中看到 <code class="highlighter-rouge">oneTask &lt;&lt; {}</code> 这样写法 <code class="highlighter-rouge">&lt;&lt;</code> 这个操作符其实是 <code class="highlighter-rouge">.letShift</code> 的缩写，它等同与 <code class="highlighter-rouge">doLast</code>操作符。</p>

<h4 id="定义任务依赖">定义任务依赖</h4>

<p>task 提供了<code class="highlighter-rouge">dependsOn</code>方法来声明一个任务依赖于一个或多个任务，被依赖的任务会先于 task 执行</p>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="rouge-code"><pre><span class="n">task</span> <span class="n">first</span> <span class="o">&lt;&lt;</span> <span class="o">{</span><span class="n">println</span> <span class="s2">"first"</span><span class="o">}</span>
<span class="n">task</span> <span class="n">second</span> <span class="o">&lt;&lt;</span> <span class="o">{</span><span class="n">println</span> <span class="s2">"second"</span><span class="o">}</span>

<span class="c1">//在构造函数中声明依赖</span>
<span class="n">task</span> <span class="nf">printVersion</span><span class="o">(</span><span class="nl">dependsOn:</span><span class="o">[</span><span class="n">second</span><span class="o">,</span><span class="n">first</span><span class="o">])&gt;&gt;{</span>
    <span class="n">println</span> <span class="s2">"version: $version"</span>
<span class="o">}</span>
<span class="n">task</span> <span class="n">third</span> <span class="o">&lt;&lt;</span> <span class="o">{</span><span class="n">println</span> <span class="s2">"third"</span><span class="o">}</span>
<span class="c1">//通过方法调用来声明依赖</span>
<span class="n">third</span><span class="o">.</span><span class="na">dependsOn</span><span class="o">(</span><span class="s2">"printlnVersion"</span><span class="o">)</span>

<span class="c1">//output</span>
<span class="n">first</span>
<span class="n">second</span>
<span class="nl">Version:</span> <span class="mf">0.1</span><span class="o">-</span><span class="n">SNAPSHOT</span>
<span class="n">third</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>查看执行顺序会发现一个系列，那就是任务的执行顺序和我们方法中声明的顺序没有关系，<code class="highlighter-rouge">first</code> 是在 <code class="highlighter-rouge">second</code> 之后声明的但是却先执行了。《Gradle In Action》是这样描素任务的依赖执行顺序的：</p>

<blockquote>
  <p>Gradle 并不保证依赖的任务能够按顺序执行，dependsOn 方法只是定义这些任务应该在这个任务之前执行，但是这些依赖的任务具体怎么执行它并不关心，如果你习惯用命令式的构建工具来定义依赖（比如 ant）这可能会难以理解。在 Gradle 里面，执行顺序是由任务的输入输出特性决定的，这样做有很多优点，比如你想修改构建逻辑的时候你不需要去了解整个任务依赖链，另一方面，因为任务不是顺序执行的，就可以并发的执行来提高性能。</p>
</blockquote>

<p>重点就是 <strong>gradle 本身并不保证任务的执行顺序，当一个任务的输出和是另一个任务的输入时，这是 gradle 才会确保它们之间的执行顺序。</strong>具体我们在 gradle 的生命周期周期中再讨论。</p>

<p>####终结者任务</p>

<p>之前我们可以通过 <code class="highlighter-rouge">dependsOn</code> 来指定一些执行任务需要依赖的任务，当执行的任务执行完毕的时候，我们也可以通过 <code class="highlighter-rouge">finalizer</code> 来指定一个任务来进行收尾工作，例如清理，回收资源等等 :</p>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="n">task</span> <span class="n">first</span> <span class="o">&lt;&lt;</span> <span class="o">{</span> <span class="n">println</span> <span class="s2">"first"</span> <span class="o">}</span>
<span class="n">task</span> <span class="n">second</span> <span class="o">&lt;&lt;</span> <span class="o">{</span> <span class="n">println</span> <span class="s2">"second"</span> <span class="o">}</span>
<span class="c1">//声明first结束后执行second任务</span>
<span class="n">first</span><span class="o">.</span><span class="na">finalizedBy</span> <span class="n">second</span>

<span class="c1">//output:</span>
<span class="n">first</span>
<span class="n">second</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>到这里 Task 的常见的动作和依赖相关的 api 也都介绍完了。本次主要是介绍了 gradle 的两个重要概念 <code class="highlighter-rouge">project</code> 和 <code class="highlighter-rouge">task</code> 以及它们的一些常用 api。下一次准备着手 gradle 的生命周期。</p>
:ET