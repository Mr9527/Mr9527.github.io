I"oE<h2 id="前言">前言</h2>

<p>今年的读书计划正式开张了，其实过年的时候就把书单中的《了不起的盖茨比》给阅读完了，但是看完如猪八戒吃人参果——不知啥滋味。只知道大概的故事情节，书中华丽的词藻、作品的艺术和主题并不能完全体会，更别说写一些阅读后的观感了。抽空肯定是要重新阅读几遍的，所以就不把它当作已读书籍了。</p>

<p>正式的阅读是从今天开始了，准备学习技术方面的书籍，但也先来点轻松的，就是这本《Head First 设计模式》。之前看过《Head First Java》书中内容通俗易懂，生动有趣是本入门的好书，设计模式呢是和那本书一起买的，买了也有些时候了，但是从学校到工作都是各种地方吃灰的角色，一直不能静下心来实践，感到十分羞愧。工作中也用到和阅读到各种设计模式却一直没有正确的认识，呈现在赶紧捡起来。</p>

<h2 id="正文">正文</h2>

<blockquote>
  <p>设计模式是一种反复使用、多数人知晓、经过分类编目、代码设计的总结。它告诉我们如何组织类和对象以解决某种问题。而且采纳这些设计模式并使它们适合我们特定的应用，是我们责无旁贷的事。</p>
</blockquote>

<h3 id="设计原则">设计原则</h3>

<p>虽然之前并没有系统的学习设计模式，但对设计模式的六大设计原则还是略有耳闻的。不过本书目前不知道出于什么原因没有去介绍它，而是自己组织语言目前也就不得而知了，咱还是按书上的通俗易懂的先来。</p>

<ul>
  <li><strong>找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代码混在一起。</strong></li>
  <li><strong>针对接口编程，而不是针对实现编程。</strong></li>
  <li><strong>多用组合，少用继承。</strong></li>
</ul>

<h3 id="实现策略模式">实现策略模式</h3>

<p>我们通过<code class="language-plaintext highlighter-rouge">java</code>代码来实现策略模式。</p>

<p>现在公司有一种产品——<code class="language-plaintext highlighter-rouge">Bird</code>(是的，你没看错，我们的产品就是鸟！),这只鸟目前的功能是<code class="language-plaintext highlighter-rouge">walk()</code>和<code class="language-plaintext highlighter-rouge">display</code>。我们还开设了两个子产品乌鸦和麻雀,如图:</p>

<pre><code class="language-mermaid">graph TB;
Bird["Bird&lt;br&gt; &lt;br&gt; &lt;br&gt;display()&lt;br&gt; &lt;br&gt;walk()"]
Bird --&gt; crow["crow&lt;br&gt; &lt;br&gt;display() //外观是黑色"]
Bird --&gt; sparrow["sparrow&lt;br&gt; &lt;br&gt;display() //外观是黄色"]
style Bird fill:#FFFACD;

</code></pre>

<p>今年，公司的竞争压力加剧，公司主管认为是该创新的时候了，他们需要在下一次股东会议上展示一些”真正”让人印象深刻的东西来振奋人心了，于是我们决定让鸟能飞!</p>

<p>小明拍胸脯保证一周就可以完成,他想他只要在<strong><code class="language-plaintext highlighter-rouge">Bird</code>类中加上<code class="language-plaintext highlighter-rouge">fly()</code>方法，这样所有鸟类就都会飞了</strong>:</p>

<pre><code class="language-mermaid">graph TB;
Bird["Bird&lt;br&gt; &lt;br&gt; &lt;br&gt;display()&lt;br&gt; &lt;br&gt;walk() &lt;br&gt; &lt;br&gt; fly() //👈小明加上的"]
Bird --&gt; crow["crow&lt;br&gt; &lt;br&gt;display() //外观是黑色"]
Bird --&gt; sparrow["sparrow&lt;br&gt; &lt;br&gt;display() //外观是黄色"]
style Bird fill:#FFFACD;
</code></pre>

<p>小明觉得天衣无缝，但是在股东会议上的展示上主管发现有很多橡胶鸟也在飞，主管让小明尽快的解决问题，不然就准备去逛前程无忧吧。</p>

<p><strong>小明觉得可以把橡胶鸟类中的<code class="language-plaintext highlighter-rouge">fly()</code>方法覆盖掉，但是以后如果加入别的鸟类又会如何?再给鸟增加一个shout的功能呢?</strong></p>

<p>利用继承来提供<code class="language-plaintext highlighter-rouge">Bird</code>的行为，会导致:</p>

<ul>
  <li><strong>代码在多个子类中重复。</strong></li>
  <li><strong>很难知道所有鸟的全部行为。</strong></li>
  <li><strong>改变会牵一发动全身,造成其他鸟不想要的改变。</strong></li>
  <li><strong>运行时的行为不容易改变。</strong></li>
</ul>

<p>如果用接口呢？同样不行,使用接口会导致大量的重复代码，如果要稍微修改一下飞行的姿势那么每个鸟类的都要去处理。</p>

<p>这时候策略模式就上场了，策略模式的定义 :</p>

<blockquote>
  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>策略模式定义了算法族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化独立与使用算法的客户。
</pre></td></tr></tbody></table></code></pre></div>  </div>
</blockquote>

<p>我们将<code class="language-plaintext highlighter-rouge">fly()</code>和<code class="language-plaintext highlighter-rouge">shout()</code>在<code class="language-plaintext highlighter-rouge">Bird</code>中声明出来，并提供两个接口<code class="language-plaintext highlighter-rouge">FlyBehavior</code>和<code class="language-plaintext highlighter-rouge">ShoutBehavior</code>来实现这两个方法</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
</pre></td><td class="rouge-code"><pre><span class="cm">/**
 * Bird
 */</span>
<span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Bird</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">FlyBehavior</span> <span class="n">flyBehavior</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">ShoutBehavior</span> <span class="n">shoutBehavior</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">display</span><span class="o">();</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">flyPerform</span><span class="o">()</span> <span class="o">{</span>
      <span class="c1">//调用FlyBehavior的fly方法</span>
        <span class="n">flyBehavior</span><span class="o">.</span><span class="na">fly</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">shoutPerform</span><span class="o">()</span> <span class="o">{</span>
      <span class="c1">//ShoutBehavior的shout方法</span>
        <span class="n">shoutBehavior</span><span class="o">.</span><span class="na">shout</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setFlyBehavior</span><span class="o">(</span><span class="nc">FlyBehavior</span> <span class="n">flyBehavior</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">flyBehavior</span> <span class="o">=</span> <span class="n">flyBehavior</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setShoutBehavior</span><span class="o">(</span><span class="nc">ShoutBehavior</span> <span class="n">shoutBehavior</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">shoutBehavior</span> <span class="o">=</span> <span class="n">shoutBehavior</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">walk</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"I was walking..."</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="cm">/**
 * FlyBehavior
 */</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">FlyBehavior</span> <span class="o">{</span>
    <span class="kt">void</span> <span class="nf">fly</span><span class="o">();</span>
<span class="o">}</span>

<span class="cm">/**
 * ShoutBehavior
 */</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ShoutBehavior</span> <span class="o">{</span>
    <span class="kt">void</span> <span class="nf">shout</span><span class="o">();</span>
<span class="o">}</span>

</pre></td></tr></tbody></table></code></pre></div></div>

<p>你可能要骂娘了，这不还是使用接口吗，你丫逗我?放下手里的板凳别急。<strong>我们将鸟的行为以接口的形式声明在里面，而实现则放在分开的类中，此类专门提供某行为接口的实现，这样，鸟类就不再需要知道行为的实现细节了。</strong></p>

<p><strong>针对接口编程，关键就在于多态，程序可以针对超类型编程，执行时会根据实际状况执行到真正的行为，不会被绑死在超类型的行为上。</strong></p>

<pre><code class="language-mermaid">graph TB;
Bird["FlyBehavior&lt;br&gt; &lt;br&gt; &lt;br&gt;fly()"]
Bird --&gt; Fly["Fly&lt;br&gt; &lt;br&gt;fly(){&lt;br&gt; &lt;br&gt; // I Can Fly&lt;br&gt;}"]
Bird --&gt; FlyNoWay["FlyNoWay&lt;br&gt; &lt;br&gt;fly(){&lt;br&gt; &lt;br&gt;  //I Can`t Fly&lt;br&gt;}"]
style Bird fill:#FFFACD;
</code></pre>

<p><code class="language-plaintext highlighter-rouge">FlyBehavior</code>和<code class="language-plaintext highlighter-rouge">ShoutBehavior</code>的实现类我们很简单我们就只列举一个:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FlyNoWay</span> <span class="kd">implements</span> <span class="nc">FlyBehavior</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">fly</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"I Can`t Fly"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>所有都完成后，我们增加一个产品喜鹊Magpie来测试我们模式。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="rouge-code"><pre><span class="cm">/**
 * 喜鹊——Bird的实现类
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Magpie</span> <span class="kd">extends</span> <span class="nc">Bird</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nf">Magpie</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">setFlyBehavior</span><span class="o">(</span><span class="k">new</span> <span class="nc">Fly</span><span class="o">());</span>
        <span class="n">setShoutBehavior</span><span class="o">(</span><span class="k">new</span> <span class="nc">Shout</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">display</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"I`m black"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

</pre></td></tr></tbody></table></code></pre></div></div>

<p>我们指定了Margpie的<code class="language-plaintext highlighter-rouge">fly()</code>和<code class="language-plaintext highlighter-rouge">Shout</code>的实现类，然后我们让它飞起来:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span> <span class="n">args</span><span class="o">[])</span> <span class="o">{</span>
         <span class="nc">Magpie</span> <span class="n">magpie</span><span class="o">=</span><span class="k">new</span> <span class="nc">Magpie</span><span class="o">();</span>
         <span class="n">magpie</span><span class="o">.</span><span class="na">display</span><span class="o">();</span>
         <span class="n">magpie</span><span class="o">.</span><span class="na">flyPerform</span><span class="o">();</span>
         <span class="n">magpie</span><span class="o">.</span><span class="na">shoutPerform</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>输出为</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="no">I</span><span class="err">`</span><span class="n">m</span> <span class="n">black</span>
<span class="no">I</span> <span class="nc">Can</span> <span class="nc">Fly</span>
<span class="no">G</span> <span class="no">G</span> <span class="no">G</span><span class="o">...</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>我们也可以调用<code class="language-plaintext highlighter-rouge">seter</code>方法来动态改变鸟的行为。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>         <span class="n">magpie</span><span class="o">.</span><span class="na">setFlyBehavior</span><span class="o">(</span><span class="k">new</span> <span class="nc">FlyNoWay</span><span class="o">());</span>
         <span class="n">magpie</span><span class="o">.</span><span class="na">flyPerform</span><span class="o">();</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>输出为:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="no">I</span><span class="err">`</span><span class="n">m</span> <span class="n">black</span>
<span class="no">I</span> <span class="nc">Can</span> <span class="nc">Fly</span>
<span class="no">G</span> <span class="no">G</span> <span class="no">G</span><span class="o">...</span>
<span class="no">I</span> <span class="nc">Can</span><span class="err">`</span><span class="n">t</span> <span class="nc">Fly</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>这就是策略模式，不要怀疑。多亏这个模式，小明可以勾画他的赌城狂欢之旅了。</p>

<p>现在回头看看整体的布局</p>

<pre><code class="language-mermaid">graph TB;
  subgraph 封装飞行行为
FlyBehavior["FlyBehavior&lt;br&gt; &lt;br&gt; &lt;br&gt;fly()"]
FlyBehavior --&gt; Fly["Fly&lt;br&gt; &lt;br&gt;fly(){&lt;br&gt; &lt;br&gt; // I Can Fly&lt;br&gt;}"]
FlyBehavior --&gt; FlyNoWay["FlyNoWay&lt;br&gt; &lt;br&gt;fly(){&lt;br&gt; &lt;br&gt;  //I Can`t Fly&lt;br&gt;}"]
style FlyBehavior fill:#FFFACD;
    end
  subgraph 客户
Bird["Bird&lt;br&gt; &lt;br&gt; &lt;br&gt;display()&lt;br&gt; &lt;br&gt;walk() &lt;br&gt; &lt;br&gt; fly()"]
Bird --&gt; crow["crow&lt;br&gt; &lt;br&gt;display() //外观是黑色"]
Bird --&gt; sparrow["sparrow&lt;br&gt; &lt;br&gt;display() //外观是黄色"]
style Bird fill:#FFFACD;
    end
   subgraph 封装叫喊行为
ShoutBehavior["ShoutBehavior&lt;br&gt; &lt;br&gt; &lt;br&gt;fly()"]
ShoutBehavior --&gt; Shout["Fly&lt;br&gt; &lt;br&gt;fly(){&lt;br&gt; &lt;br&gt; // I Can Fly&lt;br&gt;}"]
ShoutBehavior --&gt; NoShout["FlyNoWay&lt;br&gt; &lt;br&gt;fly(){&lt;br&gt; &lt;br&gt;  //I Can`t Fly&lt;br&gt;}"]
style ShoutBehavior fill:#FFFACD;
    end
Bird --&gt; FlyBehavior
Bird --&gt; ShoutBehavior
</code></pre>

:ET